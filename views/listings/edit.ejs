<% layout('layouts/boilerplate') -%>
<div class="row">
  <div class="col-8 offset-2">
    <br><br>
    <h1>Edit Listing</h1>

    <form method="post" action="/listings/<%= listing._id %>?_method=PUT" novalidate class="needs-validation" enctype="multipart/form-data">
      <div class="mb-3">
        <label for="title" class="form-label">Title:</label>
        <input
          type="text"
          id="title"
          name="listing[title]"
          class="form-control"
          placeholder="Enter the listing title"
          value="<%= listing.title %>"
          required
        />
                <div class="valid-feedback">
          Looks good!
          </div>
        <div class="invalid-feedback">
          Please provide a title for the listing.
        </div>
      </div>

      <div class="mb-3">
        <label for="description" class="form-label">Description:</label>
        <textarea
          id="description"
          name="listing[description]"
          class="form-control"
          placeholder="Write a brief description..."
          rows="4"
          required
        >        <%= listing.description %></textarea>
        <div class="invalid-feedback">
          Please provide a description.
          </div>
      </div>

      <!-- Current Image Display -->
      <div class="mb-3">
        <label class="form-label">Current Image:</label>
        <div class="current-image-container">
          <% if (listing.image && listing.image.url) { %>
            <img src="<%= listing.image.url %>" alt="Current listing image" class="img-thumbnail" style="max-width: 300px; max-height: 200px; object-fit: cover;">
            <p class="text-muted mt-2">Current listing image</p>
          <% } else { %>
            <p class="text-muted">No image currently uploaded</p>
          <% } %>
        </div>
      </div>

      <!-- Image Upload Section -->
      <div class="mb-3">
        <label for="imageFile" class="form-label">Upload New Image:</label>
        <input
          type="file"
          id="imageFile"
          name="listing[image]"
          class="form-control"
          accept="image/*"
        />
        <div class="form-text">Choose a new image to replace the current one</div>
      </div>

      <!-- Image URL Section (Alternative) -->
      <div class="mb-3">
        <label for="imageUrl" class="form-label">Image URL (Optional):</label>
        <input
          type="text"
          id="imageUrl"
          name="imageUrl"
          class="form-control"
          placeholder="Enter image URL (if not uploading a file)"
          value="<%= listing.image && listing.image.url ? listing.image.url : '' %>"
        />
        <div class="form-text">Provide an image URL as an alternative to file upload</div>
      </div>

      <div class="row">
        <div class="mb-3 col-md-4">
          <label for="price" class="form-label">Price:</label>
          <input
            type="number"
            id="price"
            name="listing[price]"
            class="form-control"
            placeholder="Enter price in INR (â‚¹)"
            value="<%= listing.price %>"
            required
          />
                  <div class="invalid-feedback">
            Please provide a valid price.
          </div>
        </div>

        <div class="mb-3 col-md-8">
          <label for="country" class="form-label">Country:</label>
          <input
            type="text"
            id="country"
            name="listing[country]"
            class="form-control"
            placeholder="Enter the country name"
            value="<%= listing.country %>"
            required
          />
          <div class="invalid-feedback">
            Please provide a valid country name.
        </div>
      </div>

      <div class="mb-3">
        <label for="location" class="form-label">Location:</label>
        <input
          type="text"
          id="location"
          name="listing[location]"
          class="form-control"
          placeholder="Enter city or locality"
          value="<%= listing.location %>"
          required
        />
        <div class="invalid-feedback">
          Please provide a valid location.
      </div>

      <!-- Map Section -->
      <div class="mb-3">
        <label class="form-label">Location on Map:</label>
        <div id="map" style="height: 400px; width: 100%; border-radius: 8px; margin-bottom: 10px;"></div>
        <div class="form-text">Click on the map to set the exact location or use the search above to automatically geocode.</div>
      </div>

      <!-- Hidden coordinates fields -->
      <input type="hidden" id="latitude" name="listing[geometry][coordinates][1]" value="<%= listing.geometry && listing.geometry.coordinates ? listing.geometry.coordinates[1] : '' %>">
      <input type="hidden" id="longitude" name="listing[geometry][coordinates][0]" value="<%= listing.geometry && listing.geometry.coordinates ? listing.geometry.coordinates[0] : '' %>">

      <br>

      <div>
        <button type="submit" class="btn btn-dark">Update Listing</button>
      </div>
      <br><br>
    </form>
  </div>
</div>

<!-- Mapbox CSS and JS -->
<link href="https://api.mapbox.com/mapbox-gl-js/v3.14.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v3.14.0/mapbox-gl.js"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">

<script>
  mapboxgl.accessToken = 'pk.eyJ1Ijoic2VoZ2FsYWF5dSIsImEiOiJjbWRzczNyeTEwMWYwMmtzaWd5dmVsdmI4In0.DE0varrK5nQbsEKShLJWIg';
  
  // Get existing coordinates or default to India
  const existingLng = <%- listing.geometry && listing.geometry.coordinates ? listing.geometry.coordinates[0] : 78.9629 %>;
  const existingLat = <%- listing.geometry && listing.geometry.coordinates ? listing.geometry.coordinates[1] : 20.5937 %>;
  
  const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v12',
    center: [existingLng, existingLat],
    zoom: 12
  });

  // Add navigation controls
  map.addControl(new mapboxgl.NavigationControl());

  // Add geocoder
  map.addControl(
    new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      mapboxgl: mapboxgl,
      placeholder: 'Search for a location',
      marker: false
    })
  );

  // Add marker with existing coordinates
  const marker = new mapboxgl.Marker({
    draggable: true
  });

  // Set initial marker position if coordinates exist
  if (<%- listing.geometry && listing.geometry.coordinates ? 'true' : 'false' %>) {
    marker.setLngLat([existingLng, existingLat]).addTo(map);
  }

  // Handle map clicks
  map.on('click', (e) => {
    const { lng, lat } = e.lngLat;
    marker.setLngLat([lng, lat]).addTo(map);
    
    // Update hidden fields
    document.getElementById('longitude').value = lng;
    document.getElementById('latitude').value = lat;
    
    // Reverse geocode to get address
    reverseGeocode(lng, lat);
  });

  // Handle marker drag
  marker.on('dragend', () => {
    const lngLat = marker.getLngLat();
    document.getElementById('longitude').value = lngLat.lng;
    document.getElementById('latitude').value = lngLat.lat;
    reverseGeocode(lngLat.lng, lngLat.lat);
  });

  // Reverse geocoding function
  async function reverseGeocode(lng, lat) {
    try {
      const response = await fetch(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${mapboxgl.accessToken}&types=place,locality,neighborhood`
      );
      const data = await response.json();
      
      if (data.features && data.features.length > 0) {
        const place = data.features[0];
        const locationInput = document.getElementById('location');
        const countryInput = document.getElementById('country');
        
        // Extract location and country from the response
        const context = place.context || [];
        const country = context.find(c => c.id.startsWith('country'));
        const region = context.find(c => c.id.startsWith('region'));
        
        if (locationInput.value === '') {
          locationInput.value = place.text;
        }
        if (countryInput.value === '') {
          countryInput.value = country ? country.text : '';
        }
      }
    } catch (error) {
      console.error('Reverse geocoding error:', error);
    }
  }

  // Handle location input changes
  document.getElementById('location').addEventListener('blur', async function() {
    const location = this.value;
    const country = document.getElementById('country').value;
    
    if (location && country) {
      try {
        const query = encodeURIComponent(`${location}, ${country}`);
        const response = await fetch(
          `https://api.mapbox.com/geocoding/v5/mapbox.places/${query}.json?access_token=${mapboxgl.accessToken}&limit=1`
        );
        const data = await response.json();
        
        if (data.features && data.features.length > 0) {
          const [lng, lat] = data.features[0].center;
          marker.setLngLat([lng, lat]).addTo(map);
          map.flyTo({ center: [lng, lat], zoom: 12 });
          
          // Update hidden fields
          document.getElementById('longitude').value = lng;
          document.getElementById('latitude').value = lat;
        }
      } catch (error) {
        console.error('Geocoding error:', error);
      }
    }
  });
</script>
